//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Expenses_Manager
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HramulEntities : DbContext
    {
        public HramulEntities()
            : base("name=HramulEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Achizitii> Achizitiis { get; set; }
        public virtual DbSet<Angajati> Angajatis { get; set; }
        public virtual DbSet<Clienti> Clientis { get; set; }
        public virtual DbSet<Comanda_Detalii> Comanda_Detaliis { get; set; }
        public virtual DbSet<Comenzi> Comenzis { get; set; }
        public virtual DbSet<Departamente> Departamentes { get; set; }
        public virtual DbSet<Depozite> Depozites { get; set; }
        public virtual DbSet<Facturi> Facturis { get; set; }
        public virtual DbSet<Furnizori> Furnizoris { get; set; }
        public virtual DbSet<State_de_plata> State_de_platas { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<AchizitiiExtended> AchizitiiExtendeds { get; set; }
        public virtual DbSet<Cheltuieli> Cheltuielis { get; set; }
        public virtual DbSet<CheltuieliLunare> CheltuieliLunares { get; set; }
        public virtual DbSet<ComenziEnhanced> ComenziEnhanceds { get; set; }
        public virtual DbSet<ComenziExtended> ComenziExtendeds { get; set; }
        public virtual DbSet<FacturiEmise> FacturiEmises { get; set; }
        public virtual DbSet<FacturiPrimite> FacturiPrimites { get; set; }
        public virtual DbSet<OrderDetailsExtended> OrderDetailsExtendeds { get; set; }
        public virtual DbSet<Salarii> Salariis { get; set; }
        public virtual DbSet<SalariiCurente> SalariiCurentes { get; set; }
        public virtual DbSet<AchizitiiExtended> AchizitiiExtendeds { get; set; }
        public virtual DbSet<ComenziEnhanced> ComenziEnhanceds { get; set; }
        public virtual DbSet<ComenziExtended> ComenziExtendeds { get; set; }
        public virtual DbSet<OrderDetailsExtended> OrderDetailsExtendeds { get; set; }
        public virtual DbSet<Produse> Produses { get; set; }
    
        public virtual int AddOrderPart(Nullable<int> order_Id, Nullable<int> product_Id, Nullable<int> quantity)
        {
            var order_IdParameter = order_Id.HasValue ?
                new ObjectParameter("Order_Id", order_Id) :
                new ObjectParameter("Order_Id", typeof(int));
    
            var product_IdParameter = product_Id.HasValue ?
                new ObjectParameter("Product_Id", product_Id) :
                new ObjectParameter("Product_Id", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrderPart", order_IdParameter, product_IdParameter, quantityParameter);
        }
    
        public virtual int BuyItem(string product_Name, Nullable<int> count, Nullable<int> invoice_Number, Nullable<decimal> unit_Price, Nullable<int> warehouse_Id, Nullable<int> supplier_Id)
        {
            var product_NameParameter = product_Name != null ?
                new ObjectParameter("Product_Name", product_Name) :
                new ObjectParameter("Product_Name", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var invoice_NumberParameter = invoice_Number.HasValue ?
                new ObjectParameter("Invoice_Number", invoice_Number) :
                new ObjectParameter("Invoice_Number", typeof(int));
    
            var unit_PriceParameter = unit_Price.HasValue ?
                new ObjectParameter("Unit_Price", unit_Price) :
                new ObjectParameter("Unit_Price", typeof(decimal));
    
            var warehouse_IdParameter = warehouse_Id.HasValue ?
                new ObjectParameter("Warehouse_Id", warehouse_Id) :
                new ObjectParameter("Warehouse_Id", typeof(int));
    
            var supplier_IdParameter = supplier_Id.HasValue ?
                new ObjectParameter("Supplier_Id", supplier_Id) :
                new ObjectParameter("Supplier_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BuyItem", product_NameParameter, countParameter, invoice_NumberParameter, unit_PriceParameter, warehouse_IdParameter, supplier_IdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> CalculateExpenses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CalculateExpenses");
        }
    
        public virtual int CalculateProfit(ObjectParameter cheltuieli, ObjectParameter castiguri)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculateProfit", cheltuieli, castiguri);
        }
    
        public virtual ObjectResult<CalculateProfitOriginal_Result> CalculateProfitOriginal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalculateProfitOriginal_Result>("CalculateProfitOriginal");
        }
    
        public virtual int IssueInvoice(ObjectParameter invoice_Id)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IssueInvoice", invoice_Id);
        }
    
        public virtual int MakeOrder(Nullable<int> employee_Id, Nullable<System.DateTime> estimated_Date, Nullable<int> client_Id, ObjectParameter order_Id)
        {
            var employee_IdParameter = employee_Id.HasValue ?
                new ObjectParameter("Employee_Id", employee_Id) :
                new ObjectParameter("Employee_Id", typeof(int));
    
            var estimated_DateParameter = estimated_Date.HasValue ?
                new ObjectParameter("Estimated_Date", estimated_Date) :
                new ObjectParameter("Estimated_Date", typeof(System.DateTime));
    
            var client_IdParameter = client_Id.HasValue ?
                new ObjectParameter("Client_Id", client_Id) :
                new ObjectParameter("Client_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MakeOrder", employee_IdParameter, estimated_DateParameter, client_IdParameter, order_Id);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int IssueInvoice(ObjectParameter invoice_Id)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IssueInvoice", invoice_Id);
        }
    }
}
